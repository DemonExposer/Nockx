<Project Sdk="Microsoft.NET.Sdk">
    <PropertyGroup>
        <OutputType>WinExe</OutputType>
        <TargetFramework>net8.0</TargetFramework>
        <Nullable>enable</Nullable>
        <BuiltInComInteropSupport>true</BuiltInComInteropSupport>
        <ApplicationManifest>app.manifest</ApplicationManifest>
        <AvaloniaUseCompiledBindingsByDefault>true</AvaloniaUseCompiledBindingsByDefault>
        <OutputPath>../bin/</OutputPath>
        <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    </PropertyGroup>
    
    <ItemGroup>
        <PackageReference Include="Avalonia" Version="11.2.4" />
        <PackageReference Include="Avalonia.Desktop" Version="11.2.4" />
        <PackageReference Include="Avalonia.Themes.Fluent" Version="11.2.4" />
        <PackageReference Include="Avalonia.Fonts.Inter" Version="11.2.4" />
        <!--Condition below is needed to remove Avalonia.Diagnostics package from build output in Release configuration.-->
        <PackageReference Condition="'$(Configuration)' == 'Debug'" Include="Avalonia.Diagnostics" Version="11.2.4" />
        <PackageReference Include="BouncyCastle.Cryptography" Version="2.5.1" />
        <PackageReference Include="LessAnnoyingHttp" Version="1.1.0" />
        <PackageReference Include="OpenTK" Version="4.9.3" />
        <PackageReference Include="OsNotifications" Version="1.0.0" />
    </ItemGroup>

	<ItemGroup>
		<Compile Update="panels\ChatPanelController.cs">
			<DependentUpon>ChatPanel.cs</DependentUpon>
		</Compile>
		<Compile Update="panels\UserInfoPanelController.cs">
			<DependentUpon>UserInfoPanel.cs</DependentUpon>
		</Compile>
        <Compile Update="MainWindowController.cs">
            <DependentUpon>MainWindow.axaml.cs</DependentUpon>
        </Compile>
        <Compile Update="panels\ChatPanelCommands.cs">
          <DependentUpon>ChatPanel.cs</DependentUpon>
        </Compile>
        <Compile Update="MainWindowModel.cs">
          <DependentUpon>MainWindow.axaml.cs</DependentUpon>
        </Compile>
        <Compile Update="windows\CallPopupWindowController.cs">
          <DependentUpon>CallPopupWindow.axaml.cs</DependentUpon>
        </Compile>
        <Compile Update="panels\FriendsPanelController.cs">
          <DependentUpon>FriendsPanel.cs</DependentUpon>
        </Compile>
	</ItemGroup>
    
    <ItemGroup>
        <None Include="sounds\**\*">
            <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
        </None>
		<None Include="LICENSE">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
		</None>
		<None Include="README">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
		</None>
    </ItemGroup>

    <!--TODO: make this only happen when running on windows or publishing TO windows. currently it only does it when on windows, no matter what is being targeted-->
	<ItemGroup Condition="'$(OS)' == 'Windows_NT'">
		<None Include="lib\win\soft_oal.dll">
			<Link>OpenAL32.dll</Link>
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
		</None>
	</ItemGroup>

	<!--TODO: possibly add transitive licenses, and mention all the libraries in the README-->
	<Target Name="CopyAndRenameLicenses" AfterTargets="Publish">
		<ItemGroup>
			<LicenseFiles Include="lib\licenses\**\*" />
		</ItemGroup>

		<Copy SourceFiles="@(LicenseFiles)" DestinationFolder="$(PublishDir)LICENSES\" />
	</Target>

	<Target Name="CopyAndRenameLicensesWin" AfterTargets="Publish" Condition="'$(OS)' == 'Windows_NT'">
		<ItemGroup>
			<LicenseFilesWin Include="lib\win\licenses\**\*" />
		</ItemGroup>

		<Copy SourceFiles="@(LicenseFilesWin)" DestinationFolder="$(PublishDir)LICENSES\" />
	</Target>
</Project>
